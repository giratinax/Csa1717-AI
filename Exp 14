def alphabeta(node, depth, alpha, beta, maximizingPlayer, values, tree):
    if depth == 0 or node not in tree:
        return values[node]
    
    if maximizingPlayer:
        maxEval = float('-inf')
        for child in tree[node]:
            eval = alphabeta(child, depth - 1, alpha, beta, False, values, tree)
            maxEval = max(maxEval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return maxEval
    else:
        minEval = float('inf')
        for child in tree[node]:
            eval = alphabeta(child, depth - 1, alpha, beta, True, values, tree)
            minEval = min(minEval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return minEval

values = {
    'A1': 3,
    'A2': 5,
    'A3': 6,
    'A4': 9,
    'B1': 1,
    'B2': 2,
    'B3': 0,
    'B4': -1
}

tree = {
    'A': ['B', 'C'],
    'B': ['A1', 'A2', 'A3', 'A4'],
    'C': ['B1', 'B2', 'B3', 'B4']
}

result = alphabeta('A', 3, float('-inf'), float('inf'), True, values, tree)
print("The optimal value is:", result)
