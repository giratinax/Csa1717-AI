from collections import deque

# State: (missionaries_left, cannibals_left, boat_side)
# boat_side: 1 means left, 0 means right

def is_valid(state):
    m_left, c_left, _ = state
    m_right = 3 - m_left
    c_right = 3 - c_left

    if m_left < 0 or c_left < 0 or m_right < 0 or c_right < 0:
        return False
    if m_left > 0 and m_left < c_left:
        return False
    if m_right > 0 and m_right < c_right:
        return False
    return True

def get_successors(state):
    m, c, b = state
    moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]
    successors = []

    for dm, dc in moves:
        if b == 1:  # Boat on the left side
            new_state = (m - dm, c - dc, 0)
        else:       # Boat on the right side
            new_state = (m + dm, c + dc, 1)

        if is_valid(new_state):
            successors.append(new_state)

    return successors

def bfs(start, goal):
    queue = deque([(start, [])])
    visited = set()

    while queue:
        state, path = queue.popleft()
        if state == goal:
            return path + [state]

        if state in visited:
            continue
        visited.add(state)

        for successor in get_successors(state):
            queue.append((successor, path + [state]))

    return None

initial_state = (3, 3, 1)
goal_state = (0, 0, 0)

solution = bfs(initial_state, goal_state)

if solution:
    print("Steps to cross the river:")
    for step in solution:
        print(f"Missionaries: {step[0]}, Cannibals: {step[1]}, Boat: {'Left' if step[2] else 'Right'}")
else:
    print("No solution found.")
