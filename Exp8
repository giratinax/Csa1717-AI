class Graph:
    def __init__(self, graph, heuristic):
        self.graph = graph
        self.heuristic = heuristic
        self.solution = {}

    def get_neighbors(self, node):
        return self.graph.get(node, [])

    def ao_star(self, node):
        print(f"Expanding node: {node}")
        if node not in self.graph or len(self.graph[node]) == 0:
            self.solution[node] = True
            return True

        min_cost = float('inf')
        best_path = None

        for child_group in self.graph[node]:
            cost = 0
            for (child, edge_cost) in child_group:
                cost += edge_cost + self.heuristic.get(child, 0)

            if cost < min_cost:
                min_cost = cost
                best_path = child_group

        # Recursively apply AO* on the best path
        is_solved = True
        for (child, _) in best_path:
            if not self.ao_star(child):
                is_solved = False

        if is_solved:
            self.solution[node] = [child for (child, _) in best_path]
            return True

        return False

    def print_solution(self):
        print("Solution Path:")
        for node in self.solution:
            print(f"{node} => {self.solution[node]}")

# Example AND-OR graph
graph = {
    'A': [[('B', 1), ('C', 1)], [('D', 2)]],
    'B': [[('E', 1)], [('F', 1)]],
    'C': [],
    'D': [[('G', 1), ('H', 1)]],
    'E': [],
    'F': [],
    'G': [],
    'H': []
}

heuristic = {
    'A': 3, 'B': 2, 'C': 2, 'D': 4,
    'E': 0, 'F': 0, 'G': 0, 'H': 0
}

g = Graph(graph, heuristic)
g.ao_star('A')
g.print_solution()
